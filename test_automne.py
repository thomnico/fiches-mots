#!/usr/bin/env python3
"""
Test sp√©cifique pour le th√®me AUTOMNE
V√©rifie la vari√©t√© des images propos√©es
"""

import os
import time
from playwright.sync_api import sync_playwright

def test_theme_automne():
    print("üçÇ Test du th√®me AUTOMNE")
    print("=" * 60)

    project_root = os.getcwd()

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)
        context = browser.new_context(viewport={'width': 1400, 'height': 1000})
        page = context.new_page()

        try:
            # Naviguer vers l'application
            url = "http://localhost:8000/"
            print(f"üìÇ Ouverture de: {url}")
            page.goto(url)
            page.wait_for_load_state('networkidle')
            print("‚úÖ Page charg√©e\n")

            # Remplir le formulaire avec le th√®me AUTOMNE
            print("üìù Remplissage du formulaire")
            theme_input = page.locator('#theme')
            theme_input.fill('automne')
            print("   ‚úì Th√®me: automne")

            words_input = page.locator('#words')
            words_input.fill("feuille\nchampignon\ncitrouille\nmarron")
            print("   ‚úì Mots: feuille, champignon, citrouille, marron\n")

            time.sleep(1)

            # Capturer les logs de la console
            console_logs = []
            def handle_console(msg):
                console_logs.append(f"   [{msg.type}] {msg.text}")
            page.on("console", handle_console)

            # Rechercher les images
            print("üîç Recherche d'images...")
            search_button = page.locator('#btn-search')
            search_button.click()

            # Attendre le chargement
            page.wait_for_selector('.word-section', timeout=10000)
            page.wait_for_selector('.image-option img', timeout=20000)
            time.sleep(15)  # Attendre que Pixabay charge toutes les images

            print("‚úÖ Images charg√©es\n")

            # Afficher les logs pertinents
            print("üìã Logs de recherche:")
            for log in console_logs:
                if 'Recherche' in log or 'trouv√©s' in log or 'Pixabay' in log:
                    print(log)

            print("\n" + "=" * 60)

            # Cr√©er des screenshots pour inspection manuelle
            screenshots_dir = 'web/screenshots'
            os.makedirs(screenshots_dir, exist_ok=True)

            print("\nüì∏ Cr√©ation des captures d'√©cran...")

            # Capture globale
            page.screenshot(path=f"{screenshots_dir}/automne-global.png")
            print("   ‚úì automne-global.png")

            # Captures individuelles par mot
            word_sections = page.locator('.word-section').count()
            for i in range(min(word_sections, 4)):
                section = page.locator('.word-section').nth(i)
                word_title = section.locator('h3').inner_text()

                # Scroll vers la section
                section.scroll_into_view_if_needed()
                time.sleep(0.5)

                # Capture de la section
                section.screenshot(path=f"{screenshots_dir}/automne-{i+1}-{word_title.lower()}.png")
                print(f"   ‚úì automne-{i+1}-{word_title.lower()}.png")

            print("\n" + "=" * 60)
            print("‚úÖ Test termin√©!")
            print(f"üì∏ Captures dans: {screenshots_dir}/")
            print("\nInspectez manuellement les images pour v√©rifier:")
            print("  1. La vari√©t√© des images pour chaque mot")
            print("  2. La pertinence par rapport au th√®me automne")
            print("  3. La qualit√© des vecteurs Pixabay")

            # Garder le navigateur ouvert pour inspection
            print("\n‚è∏Ô∏è  Navigateur reste ouvert pendant 10 secondes...")
            time.sleep(10)

        except Exception as e:
            print(f"\n‚ùå Erreur: {e}")
            raise
        finally:
            browser.close()
            print("üîí Navigateur ferm√©")

if __name__ == '__main__':
    test_theme_automne()
