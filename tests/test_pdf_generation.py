#!/usr/bin/env python3
"""
Suite de tests Playwright pour la g√©n√©ration de PDF
Teste la g√©n√©ration sur desktop et mobile avec v√©rifications compl√®tes
"""

import os
import time
import json
from playwright.sync_api import sync_playwright, expect

class TestConfig:
    """Configuration des tests PDF"""
    # URL de l'application
    APP_URL = "http://localhost:3000"

    # Dossier pour les screenshots
    SCREENSHOTS_DIR = "web/screenshots/tests/pdf"

    # Timeouts adapt√©s pour r√©seau lent
    TIMEOUT = 60000  # 60 secondes (g√©n√©ration PDF + r√©seau lent)
    IMAGE_SEARCH_TIMEOUT = 90000  # 90 secondes pour recherche d'images

    # Nombre de tentatives en cas d'√©chec r√©seau
    MAX_RETRIES = 3
    RETRY_DELAY = 2  # secondes entre les tentatives

    # Configurations d'appareils (Firefox ne supporte pas is_mobile/has_touch)
    DEVICES = {
        'Desktop': {
            'viewport': {'width': 1280, 'height': 800},
            'user_agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
        },
        'iPhone 12': {
            'viewport': {'width': 390, 'height': 844},
            'user_agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15',
            'device_scale_factor': 3,
        },
        'Pixel 5': {
            'viewport': {'width': 393, 'height': 851},
            'user_agent': 'Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36',
            'device_scale_factor': 3,
        },
    }

def setup_test_env():
    """Pr√©pare l'environnement de test"""
    os.makedirs(TestConfig.SCREENSHOTS_DIR, exist_ok=True)

    # V√©rifier que le serveur est actif
    import urllib.request
    try:
        urllib.request.urlopen(TestConfig.APP_URL, timeout=5)
    except:
        print(f"‚ùå Serveur non actif sur {TestConfig.APP_URL}")
        print("   Lancez: vercel dev")
        exit(1)

def test_pdf_generation_workflow(page, device_name):
    """Test 1: Workflow complet jusqu'√† la g√©n√©ration du PDF"""
    print(f"\nüìù Test 1: G√©n√©ration PDF - Workflow complet ({device_name})")

    # Configurer les √©v√©nements de console pour d√©tecter les erreurs
    console_errors = []
    console_logs = []
    page.on('console', lambda msg: (
        console_errors.append(msg.text) if msg.type == 'error' else
        console_logs.append(msg.text) if 'PDF' in msg.text or 'pdf' in msg.text else None
    ))

    # Augmenter le timeout de navigation pour r√©seau lent
    page.set_default_timeout(TestConfig.TIMEOUT)

    page.goto(TestConfig.APP_URL, wait_until='domcontentloaded')  # Plus rapide que networkidle
    page.wait_for_load_state('domcontentloaded')

    # √âtape 1: Entrer des mots simples (moins de mots = plus rapide)
    words = ['chat', 'chien']
    page.locator('#words').fill('\n'.join(words))
    print(f"   √âtape 1/4: Mots saisis: {', '.join(words)}")

    # √âtape 2: Rechercher les images avec retry
    print("   √âtape 2/4: Recherche d'images...")
    for attempt in range(TestConfig.MAX_RETRIES):
        try:
            page.locator('#btn-search').click()
            page.wait_for_selector('.word-section', timeout=TestConfig.IMAGE_SEARCH_TIMEOUT)

            # Attendre que toutes les sections soient cr√©√©es
            page.wait_for_function(
                f"document.querySelectorAll('.word-section').length === {len(words)}",
                timeout=TestConfig.IMAGE_SEARCH_TIMEOUT
            )
            time.sleep(3)  # Attendre que les images soient charg√©es
            print("   √âtape 2/4: Images recherch√©es ‚úì")
            break
        except Exception as e:
            if attempt < TestConfig.MAX_RETRIES - 1:
                print(f"      ‚ö†Ô∏è  Tentative {attempt + 1} √©chou√©e, retry...")
                time.sleep(TestConfig.RETRY_DELAY)
                page.reload()
                page.locator('#words').fill('\n'.join(words))
            else:
                raise Exception(f"√âchec apr√®s {TestConfig.MAX_RETRIES} tentatives: {e}")

    # V√©rifier que des images sont s√©lectionn√©es
    selected_images = page.locator('.image-option.selected').count()
    assert selected_images > 0, "Aucune image s√©lectionn√©e"
    print(f"   √âtape 3/4: {selected_images} images s√©lectionn√©es ‚úì")

    # √âtape 3: G√©n√©rer le PDF
    print("   √âtape 4/4: G√©n√©ration du PDF...")

    # √âcouter les nouveaux onglets/popups
    popup_opened = []
    def handle_popup(popup):
        popup_opened.append(popup)
        print(f"      ‚Üí Popup/onglet ouvert: {popup.url[:100]}")

    page.context.on('page', handle_popup)

    # √âcouter les t√©l√©chargements
    downloads = []
    def handle_download(download):
        downloads.append(download)
        print(f"      ‚Üí T√©l√©chargement d√©clench√©: {download.suggested_filename}")

    page.on('download', handle_download)

    # Cliquer sur "G√©n√©rer le PDF"
    page.locator('#btn-generate').click()

    # Attendre que la g√©n√©ration soit termin√©e
    # On attend soit un popup, soit un t√©l√©chargement, soit un message de succ√®s
    try:
        page.wait_for_function(
            "document.querySelector('#progress-text')?.textContent?.includes('succ√®s')",
            timeout=TestConfig.TIMEOUT
        )
        time.sleep(2)  # Laisser le temps pour le popup/t√©l√©chargement
        print("      ‚Üí Message de succ√®s affich√© ‚úì")
    except:
        print("      ‚ö†Ô∏è  Pas de message de succ√®s d√©tect√©")

    # V√©rifier les logs de console
    pdf_logs = [log for log in console_logs if 'PDF' in log or 'g√©n√©r√©' in log]
    if pdf_logs:
        print("      ‚Üí Logs PDF:")
        for log in pdf_logs[:5]:
            print(f"         {log}")

    # V√©rifier les erreurs
    if console_errors:
        print(f"      ‚ö†Ô∏è  Erreurs console: {len(console_errors)}")
        for error in console_errors[:3]:
            print(f"         {error}")

    # R√©sultats
    results = {
        'popup_opened': len(popup_opened) > 0,
        'download_triggered': len(downloads) > 0,
        'console_errors': len(console_errors),
        'pdf_logs': len(pdf_logs)
    }

    print(f"\n   üìä R√©sultats:")
    print(f"      ‚Ä¢ Popup ouvert: {'‚úì' if results['popup_opened'] else '‚úó'}")
    print(f"      ‚Ä¢ T√©l√©chargement: {'‚úì' if results['download_triggered'] else '‚úó'}")
    print(f"      ‚Ä¢ Logs PDF: {results['pdf_logs']}")
    print(f"      ‚Ä¢ Erreurs: {results['console_errors']}")

    page.screenshot(path=f"{TestConfig.SCREENSHOTS_DIR}/01-workflow-{device_name.replace(' ', '-')}.png")

    # Le test r√©ussit si au moins un des deux (popup ou t√©l√©chargement) s'est produit
    success = results['popup_opened'] or results['download_triggered']

    if not success:
        print(f"   ‚ùå √âCHEC: Ni popup ni t√©l√©chargement d√©tect√© sur {device_name}")
        return False

    print(f"   ‚úÖ PDF g√©n√©r√© avec succ√®s sur {device_name}")
    return True

def test_pdf_blob_creation(page, device_name):
    """Test 2: V√©rifier que le blob PDF est cr√©√© correctement"""
    print(f"\nüìù Test 2: V√©rification cr√©ation blob PDF ({device_name})")

    page.set_default_timeout(TestConfig.TIMEOUT)
    page.goto(TestConfig.APP_URL, wait_until='domcontentloaded')

    # Entrer des mots et rechercher les images avec retry
    words = ['rouge']
    page.locator('#words').fill('\n'.join(words))

    for attempt in range(TestConfig.MAX_RETRIES):
        try:
            page.locator('#btn-search').click()
            page.wait_for_selector('.word-section', timeout=TestConfig.IMAGE_SEARCH_TIMEOUT)
            page.wait_for_function(
                f"document.querySelectorAll('.word-section').length === {len(words)}",
                timeout=TestConfig.IMAGE_SEARCH_TIMEOUT
            )
            time.sleep(3)
            break
        except Exception as e:
            if attempt < TestConfig.MAX_RETRIES - 1:
                print(f"      ‚ö†Ô∏è  Tentative {attempt + 1} √©chou√©e, retry...")
                time.sleep(TestConfig.RETRY_DELAY)
                page.reload()
                page.locator('#words').fill('\n'.join(words))
            else:
                print(f"      ‚ö†Ô∏è  Impossible de charger les images apr√®s {TestConfig.MAX_RETRIES} tentatives")
                print(f"      Skip test (probl√®me r√©seau probable)")
                return None

    # Injecter un script pour capturer le blob PDF
    page.evaluate("""
        window.pdfBlobCaptured = null;
        window.pdfUrlCaptured = null;

        // Override window.open pour capturer l'URL
        const originalOpen = window.open;
        window.open = function(url, target) {
            console.log('window.open appel√© avec:', url);
            window.pdfUrlCaptured = url;
            return originalOpen.call(this, url, target);
        };

        // Hook dans pdfGenerator pour capturer le blob
        if (window.pdfGenerator) {
            const originalGenerate = window.pdfGenerator.generatePDF;
            window.pdfGenerator.generatePDF = async function(...args) {
                const result = await originalGenerate.apply(this, args);
                if (this.doc) {
                    window.pdfBlobCaptured = this.doc.output('blob');
                    console.log('Blob PDF captur√©:', window.pdfBlobCaptured.size, 'bytes');
                }
                return result;
            };
        }
    """)

    # G√©n√©rer le PDF
    page.locator('#btn-generate').click()

    try:
        page.wait_for_function(
            "document.querySelector('#progress-text')?.textContent?.includes('succ√®s')",
            timeout=TestConfig.TIMEOUT
        )
        time.sleep(2)
    except:
        pass

    # V√©rifier que le blob a √©t√© captur√©
    blob_info = page.evaluate("""
        ({
            blobCaptured: window.pdfBlobCaptured !== null,
            blobSize: window.pdfBlobCaptured ? window.pdfBlobCaptured.size : 0,
            blobType: window.pdfBlobCaptured ? window.pdfBlobCaptured.type : null,
            urlCaptured: window.pdfUrlCaptured !== null,
            urlValue: window.pdfUrlCaptured ? window.pdfUrlCaptured.substring(0, 50) : null
        })
    """)

    print(f"   Blob captur√©: {blob_info['blobCaptured']}")
    print(f"   Taille blob: {blob_info['blobSize']} bytes")
    print(f"   Type blob: {blob_info['blobType']}")
    print(f"   URL captur√©e: {blob_info['urlCaptured']}")
    if blob_info['urlValue']:
        print(f"   URL d√©but: {blob_info['urlValue']}...")

    page.screenshot(path=f"{TestConfig.SCREENSHOTS_DIR}/02-blob-{device_name.replace(' ', '-')}.png")

    # V√©rifications
    assert blob_info['blobSize'] > 0, f"Blob vide ou non cr√©√© (taille: {blob_info['blobSize']})"
    assert blob_info['blobType'] == 'application/pdf', f"Type incorrect: {blob_info['blobType']}"

    print(f"   ‚úÖ Blob PDF cr√©√© correctement ({blob_info['blobSize']} bytes)")
    return True

def test_pdf_download_fallback(page, device_name):
    """Test 3: Test du fallback de t√©l√©chargement si window.open √©choue"""
    print(f"\nüìù Test 3: Fallback t√©l√©chargement ({device_name})")

    page.set_default_timeout(TestConfig.TIMEOUT)
    page.goto(TestConfig.APP_URL, wait_until='domcontentloaded')

    # Bloquer window.open pour forcer le fallback
    page.evaluate("""
        window.open = function(url, target) {
            console.log('window.open bloqu√© (simulation popup blocker)');
            return null;  // Simuler un blocage
        };
    """)

    # Entrer des mots et rechercher les images avec retry
    words = ['soleil']
    page.locator('#words').fill('\n'.join(words))

    for attempt in range(TestConfig.MAX_RETRIES):
        try:
            page.locator('#btn-search').click()
            page.wait_for_selector('.word-section', timeout=TestConfig.IMAGE_SEARCH_TIMEOUT)
            time.sleep(3)
            break
        except Exception as e:
            if attempt < TestConfig.MAX_RETRIES - 1:
                print(f"      ‚ö†Ô∏è  Tentative {attempt + 1} √©chou√©e, retry...")
                time.sleep(TestConfig.RETRY_DELAY)
                page.reload()

                # Re-bloquer window.open apr√®s reload
                page.evaluate("""
                    window.open = function(url, target) {
                        console.log('window.open bloqu√© (simulation popup blocker)');
                        return null;
                    };
                """)
                page.locator('#words').fill('\n'.join(words))
            else:
                print(f"      ‚ö†Ô∏è  Impossible de charger les images apr√®s {TestConfig.MAX_RETRIES} tentatives")
                print(f"      Skip test (probl√®me r√©seau probable)")
                return None

    # √âcouter les t√©l√©chargements
    downloads = []
    page.on('download', lambda d: downloads.append(d))

    # G√©n√©rer le PDF
    page.locator('#btn-generate').click()

    try:
        page.wait_for_function(
            "document.querySelector('#progress-text')?.textContent?.includes('succ√®s')",
            timeout=TestConfig.TIMEOUT
        )
        time.sleep(2)
    except:
        pass

    print(f"   T√©l√©chargements d√©clench√©s: {len(downloads)}")

    # Note: ce test peut √©chouer si le fallback n'est pas impl√©ment√©
    # C'est exactement ce qu'on veut d√©tecter!

    page.screenshot(path=f"{TestConfig.SCREENSHOTS_DIR}/03-fallback-{device_name.replace(' ', '-')}.png")

    if len(downloads) > 0:
        print(f"   ‚úÖ Fallback t√©l√©chargement fonctionne")
        return True
    else:
        print(f"   ‚ö†Ô∏è  Fallback t√©l√©chargement non impl√©ment√© (PROBL√àME D√âTECT√â)")
        return False

def run_all_tests():
    """Ex√©cute tous les tests PDF"""
    print("="*60)
    print("üìÑ Suite de Tests Playwright - G√©n√©ration PDF")
    print("="*60)

    setup_test_env()

    tests = [
        ("Workflow complet", test_pdf_generation_workflow),
        ("Cr√©ation blob", test_pdf_blob_creation),
        ("Fallback t√©l√©chargement", test_pdf_download_fallback),
    ]

    all_results = []

    with sync_playwright() as p:
        print("\nüåê Lancement du navigateur Firefox...")
        browser = p.firefox.launch(headless=False)

        # Tester sur chaque appareil
        for device_name, device_config in TestConfig.DEVICES.items():
            print(f"\n{'='*60}")
            print(f"üì± Tests sur {device_name}")
            print(f"{'='*60}")

            context = browser.new_context(**device_config)

            for test_name, test_func in tests:
                page = context.new_page()
                full_test_name = f"{test_name} ({device_name})"
                print(f"\n{'‚îÄ'*60}")

                try:
                    result = test_func(page, device_name)

                    if result is True:
                        all_results.append((full_test_name, "PASS", None))
                    elif result is False:
                        all_results.append((full_test_name, "FAIL", "Test √©chou√©"))
                    else:
                        all_results.append((full_test_name, "SKIP", "Conditions non remplies"))

                except AssertionError as e:
                    all_results.append((full_test_name, "FAIL", str(e)))
                    print(f"   ‚ùå √âCHEC: {e}")
                    page.screenshot(path=f"{TestConfig.SCREENSHOTS_DIR}/error-{device_name.replace(' ', '-')}-{test_name.replace(' ', '-')}.png")

                except Exception as e:
                    all_results.append((full_test_name, "ERROR", str(e)))
                    print(f"   ‚ùå ERREUR: {e}")

                finally:
                    page.close()
                    time.sleep(1)

            context.close()

        browser.close()

    # R√©sum√©
    print("\n" + "="*60)
    print("üìä R√âSUM√â DES TESTS PDF")
    print("="*60)

    passed = sum(1 for _, status, _ in all_results if status == "PASS")
    failed = sum(1 for _, status, _ in all_results if status == "FAIL")
    skipped = sum(1 for _, status, _ in all_results if status == "SKIP")
    errors = sum(1 for _, status, _ in all_results if status == "ERROR")

    for test_name, status, message in all_results:
        icon = {
            "PASS": "‚úÖ",
            "FAIL": "‚ùå",
            "SKIP": "‚ö†Ô∏è ",
            "ERROR": "üí•"
        }[status]

        msg = f" - {message[:50]}" if message else ""
        print(f"{icon} {status:6} {test_name:50} {msg}")

    print("\n" + "="*60)
    print(f"Total: {len(all_results)} tests")
    print(f"‚úÖ R√©ussis: {passed}")
    print(f"‚ùå √âchou√©s: {failed}")
    print(f"‚ö†Ô∏è  Saut√©s: {skipped}")
    print(f"üí• Erreurs: {errors}")
    print("="*60)

    print(f"\nüì∏ Screenshots sauvegard√©s dans: {TestConfig.SCREENSHOTS_DIR}/")

    # Code de sortie
    if failed > 0 or errors > 0:
        print("\n‚ö†Ô∏è  Des tests ont √©chou√©!")
        exit(1)
    else:
        print("\nüéâ Tous les tests PDF sont pass√©s!")
        exit(0)

if __name__ == "__main__":
    if not os.path.exists('web/index.html'):
        print("‚ùå Erreur: Ex√©cutez ce script depuis le dossier racine du projet")
        print("   cd /Volumes/sidecar/src/fiches-mots")
        exit(1)

    run_all_tests()
