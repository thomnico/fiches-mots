#!/usr/bin/env python3
"""
Suite de tests Playwright pour la compatibilit√© mobile
Teste la r√©activit√©, les interactions tactiles, et l'API Mistral sur mobile
"""

import os
import time
import json
from playwright.sync_api import sync_playwright

class TestConfig:
    """Configuration des tests Mobile"""
    # URL de l'application
    APP_URL = "http://localhost:3000"  # Vercel dev requis pour l'API

    # Dossier pour les screenshots
    SCREENSHOTS_DIR = "web/screenshots/tests/mobile"

    # Timeout pour les op√©rations
    TIMEOUT = 20000  # 20 secondes (mobile peut √™tre plus lent)

    # Timeout pour les requ√™tes API
    API_TIMEOUT = 30000  # 30 secondes (connexion mobile peut √™tre plus lente)

    # Configurations d'appareils mobiles
    DEVICES = {
        'iPhone 12': {
            'viewport': {'width': 390, 'height': 844},
            'user_agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1',
            'device_scale_factor': 3,
            'is_mobile': True,
            'has_touch': True,
        },
        'iPhone SE': {
            'viewport': {'width': 375, 'height': 667},
            'user_agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1',
            'device_scale_factor': 2,
            'is_mobile': True,
            'has_touch': True,
        },
        'Pixel 5': {
            'viewport': {'width': 393, 'height': 851},
            'user_agent': 'Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.91 Mobile Safari/537.36',
            'device_scale_factor': 3,
            'is_mobile': True,
            'has_touch': True,
        },
        'iPad Air': {
            'viewport': {'width': 820, 'height': 1180},
            'user_agent': 'Mozilla/5.0 (iPad; CPU OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1',
            'device_scale_factor': 2,
            'is_mobile': True,
            'has_touch': True,
        },
    }

def setup_test_env():
    """Pr√©pare l'environnement de test"""
    os.makedirs(TestConfig.SCREENSHOTS_DIR, exist_ok=True)

    # V√©rifier que le serveur est actif
    import urllib.request
    try:
        urllib.request.urlopen(TestConfig.APP_URL, timeout=5)
    except:
        print(f"‚ùå Serveur non actif sur {TestConfig.APP_URL}")
        print("   ‚ö†Ô∏è  Les tests n√©cessitent Vercel Dev!")
        print("   Lancez: vercel dev")
        exit(1)

def test_mobile_viewport_responsive(page, device_name):
    """Test 1: Interface r√©active sur diff√©rents viewports mobiles"""
    print(f"\nüìù Test 1: R√©activit√© viewport ({device_name})")

    page.goto(TestConfig.APP_URL)
    page.wait_for_load_state('networkidle')

    # V√©rifier que les √©l√©ments principaux sont visibles
    elements = {
        '#theme': 'Champ th√®me',
        '#words': 'Zone de texte mots',
        '#btn-magic': 'Bouton IA',
        '#btn-search': 'Bouton recherche',
        '#btn-generate': 'Bouton g√©n√©rer PDF',
    }

    for selector, name in elements.items():
        element = page.locator(selector)
        assert element.is_visible(), f"{name} non visible sur {device_name}"

    print(f"   ‚úÖ Tous les √©l√©ments visibles sur {device_name}")

    # V√©rifier qu'il n'y a pas de d√©passement horizontal
    viewport_width = page.viewport_size['width']
    body_width = page.evaluate('document.body.scrollWidth')

    # Tol√©rance de 5px pour les bordures/marges
    assert body_width <= viewport_width + 5, \
        f"D√©bordement horizontal: {body_width}px > {viewport_width}px"

    print(f"   ‚úÖ Pas de d√©bordement horizontal ({body_width}px ‚â§ {viewport_width}px)")

    page.screenshot(path=f"{TestConfig.SCREENSHOTS_DIR}/01-responsive-{device_name.replace(' ', '-')}.png")
    return True

def test_mobile_touch_interactions(page, device_name):
    """Test 2: Interactions tactiles sur mobile"""
    print(f"\nüìù Test 2: Interactions tactiles ({device_name})")

    page.goto(TestConfig.APP_URL)
    page.wait_for_load_state('networkidle')

    # Test 1: Tap sur le champ th√®me
    theme_field = page.locator('#theme')
    theme_field.tap()
    time.sleep(0.5)

    # V√©rifier que le champ a le focus
    is_focused = page.evaluate('document.activeElement.id === "theme"')
    assert is_focused, "Le champ th√®me n'a pas re√ßu le focus apr√®s tap"
    print("   ‚úÖ Tap sur champ th√®me fonctionne")

    # Test 2: Remplir le champ avec le clavier virtuel
    theme_field.fill('animaux')
    theme_value = theme_field.input_value()
    assert theme_value == 'animaux', f"Valeur incorrecte: {theme_value}"
    print("   ‚úÖ Saisie tactile fonctionne")

    # Test 3: Tap sur le bouton Mistral
    btn_magic = page.locator('#btn-magic')
    btn_magic.tap()
    print("   ‚úÖ Tap sur bouton fonctionne")

    page.screenshot(path=f"{TestConfig.SCREENSHOTS_DIR}/02-touch-{device_name.replace(' ', '-')}.png")
    return True

def test_mobile_mistral_api_bug(page, device_name):
    """Test 3: Reproduction du bug API Mistral sur mobile (BUG CONNU)"""
    print(f"\nüìù Test 3: API Mistral sur mobile ({device_name}) - ‚ö†Ô∏è BUG CONNU")

    page.goto(TestConfig.APP_URL)
    page.wait_for_load_state('networkidle')

    # Entrer un th√®me
    page.locator('#theme').fill('fruits')

    # Cliquer sur le bouton Mistral
    page.locator('#btn-magic').tap()
    print("   G√©n√©ration en cours...")

    # Capturer les erreurs de console
    console_errors = []
    page.on('console', lambda msg: console_errors.append(msg.text) if msg.type == 'error' else None)

    # Capturer les erreurs r√©seau
    network_errors = []
    page.on('requestfailed', lambda request: network_errors.append({
        'url': request.url,
        'failure': request.failure
    }))

    try:
        # Attendre que le bouton soit √† nouveau activ√©
        page.wait_for_function(
            "document.querySelector('#btn-magic').disabled === false",
            timeout=TestConfig.API_TIMEOUT
        )
        time.sleep(1)

        # V√©rifier les mots g√©n√©r√©s
        words_value = page.locator('#words').input_value()
        words = [w.strip() for w in words_value.split('\n') if w.strip()]

        if len(words) > 0:
            print(f"   ‚úÖ API fonctionne sur {device_name}: {len(words)} mots g√©n√©r√©s")
            print(f"   Mots: {', '.join(words[:3])}")
            success = True
        else:
            print(f"   ‚ùå BUG CONFIRM√â: Aucun mot g√©n√©r√© sur {device_name}")
            success = False

    except Exception as e:
        print(f"   ‚ùå BUG CONFIRM√â: Timeout/Erreur sur {device_name}")
        print(f"   Erreur: {e}")
        success = False

    # Afficher les erreurs captur√©es
    if console_errors:
        print(f"   üìã Erreurs console: {len(console_errors)}")
        for error in console_errors[:3]:
            print(f"      - {error}")

    if network_errors:
        print(f"   üåê Erreurs r√©seau: {len(network_errors)}")
        for error in network_errors[:3]:
            print(f"      - {error['url']}: {error['failure']}")

    page.screenshot(path=f"{TestConfig.SCREENSHOTS_DIR}/03-api-bug-{device_name.replace(' ', '-')}.png")

    # Ce test ne fait pas √©chouer la suite (BUG CONNU)
    # On retourne le r√©sultat pour information
    return success

def test_mobile_mistral_api_direct(page, device_name):
    """Test 4: Appel direct √† l'API Mistral avec user-agent mobile"""
    print(f"\nüìù Test 4: API directe avec user-agent {device_name}")

    # Tester l'API directement avec le user-agent mobile
    try:
        response = page.request.post(
            f"{TestConfig.APP_URL}/api/mistral",
            data={
                "theme": "animaux",
                "count": 5
            },
            timeout=TestConfig.API_TIMEOUT
        )

        assert response.ok, f"API retourn√© {response.status}"

        data = response.json()
        print(f"   R√©ponse API: {json.dumps(data, ensure_ascii=False, indent=2)[:200]}...")

        # V√©rifications
        assert "words" in data, "Pas de champ 'words' dans la r√©ponse"
        assert isinstance(data["words"], list), "'words' n'est pas une liste"
        assert len(data["words"]) > 0, "Liste de mots vide"

        print(f"   ‚úÖ API directe fonctionne sur {device_name}: {len(data['words'])} mots")

    except Exception as e:
        print(f"   ‚ùå API directe √©choue sur {device_name}: {e}")
        page.screenshot(path=f"{TestConfig.SCREENSHOTS_DIR}/04-api-direct-error-{device_name.replace(' ', '-')}.png")
        raise

    return True

def test_mobile_buttons_size(page, device_name):
    """Test 5: Taille des boutons adapt√©e au tactile"""
    print(f"\nüìù Test 5: Taille des boutons tactiles ({device_name})")

    page.goto(TestConfig.APP_URL)
    page.wait_for_load_state('networkidle')

    # Taille minimale recommand√©e pour les boutons tactiles: 44x44px (iOS) ou 48x48px (Android)
    min_size = 44

    buttons = {
        '#btn-magic': 'Bouton IA',
        '#btn-search': 'Bouton recherche',
        '#btn-generate': 'Bouton g√©n√©rer PDF',
    }

    for selector, name in buttons.items():
        button = page.locator(selector)
        bbox = button.bounding_box()

        if bbox:
            height = bbox['height']
            width = bbox['width']

            assert height >= min_size, \
                f"{name} trop petit (hauteur: {height}px < {min_size}px)"
            assert width >= min_size, \
                f"{name} trop √©troit (largeur: {width}px < {min_size}px)"

            print(f"   ‚úÖ {name}: {width:.0f}x{height:.0f}px")

    page.screenshot(path=f"{TestConfig.SCREENSHOTS_DIR}/05-buttons-{device_name.replace(' ', '-')}.png")
    return True

def test_mobile_full_workflow(page, device_name):
    """Test 6: Workflow complet sur mobile (si l'API fonctionne)"""
    print(f"\nüìù Test 6: Workflow complet sur {device_name}")

    page.goto(TestConfig.APP_URL)
    page.wait_for_load_state('networkidle')

    # √âtape 1: G√©n√©rer les mots avec Mistral
    page.locator('#theme').fill('couleurs')
    page.locator('#btn-magic').tap()

    print("   √âtape 1/3: G√©n√©ration de mots...")

    try:
        page.wait_for_function(
            "document.querySelector('#btn-magic').disabled === false",
            timeout=TestConfig.API_TIMEOUT
        )
        time.sleep(1)

        words_value = page.locator('#words').input_value()
        words = [w.strip() for w in words_value.split('\n') if w.strip()]

        if len(words) == 0:
            print("   ‚ö†Ô∏è  Skip workflow: API Mistral n'a pas g√©n√©r√© de mots")
            return None

        print(f"   ‚úÖ {len(words)} mots g√©n√©r√©s")

        # √âtape 2: Rechercher les images
        print("   √âtape 2/3: Recherche d'images...")
        page.locator('#btn-search').tap()

        # Attendre les sections
        page.wait_for_selector('.word-section', timeout=TestConfig.TIMEOUT)
        time.sleep(2)

        sections = page.locator('.word-section').count()
        print(f"   ‚úÖ {sections} sections cr√©√©es")

        # √âtape 3: Screenshot final
        print("   √âtape 3/3: V√©rification visuelle...")
        page.screenshot(path=f"{TestConfig.SCREENSHOTS_DIR}/06-workflow-{device_name.replace(' ', '-')}.png")

        print(f"   ‚úÖ Workflow complet r√©ussi sur {device_name}")
        return True

    except Exception as e:
        print(f"   ‚ùå Workflow √©chou√©: {e}")
        page.screenshot(path=f"{TestConfig.SCREENSHOTS_DIR}/06-workflow-error-{device_name.replace(' ', '-')}.png")
        return None

def test_mobile_orientation_landscape(page, device_name):
    """Test 7: Test en mode paysage (landscape)"""
    print(f"\nüìù Test 7: Mode paysage ({device_name})")

    # Inverser les dimensions pour le mode paysage
    viewport = page.viewport_size
    page.set_viewport_size({'width': viewport['height'], 'height': viewport['width']})

    page.goto(TestConfig.APP_URL)
    page.wait_for_load_state('networkidle')

    # V√©rifier que les √©l√©ments sont toujours visibles
    elements = ['#theme', '#words', '#btn-magic', '#btn-search', '#btn-generate']

    for selector in elements:
        element = page.locator(selector)
        assert element.is_visible(), f"{selector} non visible en mode paysage"

    print(f"   ‚úÖ Interface fonctionne en mode paysage sur {device_name}")

    page.screenshot(path=f"{TestConfig.SCREENSHOTS_DIR}/07-landscape-{device_name.replace(' ', '-')}.png")

    # Remettre en mode portrait
    page.set_viewport_size(viewport)

    return True

def run_all_tests():
    """Ex√©cute tous les tests Mobile"""
    print("="*60)
    print("üì± Suite de Tests Playwright - Mobile")
    print("="*60)

    setup_test_env()

    # Tests √† ex√©cuter sur chaque appareil
    tests_per_device = [
        ("Viewport r√©actif", test_mobile_viewport_responsive),
        ("Interactions tactiles", test_mobile_touch_interactions),
        ("API Mistral (BUG)", test_mobile_mistral_api_bug),
        ("API directe", test_mobile_mistral_api_direct),
        ("Taille boutons", test_mobile_buttons_size),
        ("Workflow complet", test_mobile_full_workflow),
        ("Mode paysage", test_mobile_orientation_landscape),
    ]

    all_results = []

    with sync_playwright() as p:
        print("\nüåê Lancement du navigateur Firefox...")
        browser = p.firefox.launch(headless=False)

        # Tester sur chaque appareil
        for device_name, device_config in TestConfig.DEVICES.items():
            print(f"\n{'='*60}")
            print(f"üì± Tests sur {device_name}")
            print(f"   Viewport: {device_config['viewport']['width']}x{device_config['viewport']['height']}")
            print(f"{'='*60}")

            context = browser.new_context(**device_config)

            for test_name, test_func in tests_per_device:
                page = context.new_page()
                full_test_name = f"{test_name} ({device_name})"
                print(f"\n{'‚îÄ'*60}")

                try:
                    result = test_func(page, device_name)

                    if result is True:
                        all_results.append((full_test_name, "PASS", None))
                    elif result is None:
                        all_results.append((full_test_name, "SKIP", "Conditions non remplies"))
                    elif result is False:
                        all_results.append((full_test_name, "WARN", "BUG CONNU"))
                    else:
                        all_results.append((full_test_name, "FAIL", "Test √©chou√©"))

                except AssertionError as e:
                    all_results.append((full_test_name, "FAIL", str(e)))
                    print(f"   ‚ùå √âCHEC: {e}")
                    page.screenshot(path=f"{TestConfig.SCREENSHOTS_DIR}/error-{device_name.replace(' ', '-')}-{test_name.replace(' ', '-')}.png")

                except Exception as e:
                    all_results.append((full_test_name, "ERROR", str(e)))
                    print(f"   ‚ùå ERREUR: {e}")

                finally:
                    page.close()
                    time.sleep(0.5)

            context.close()

        browser.close()

    # R√©sum√©
    print("\n" + "="*60)
    print("üìä R√âSUM√â DES TESTS MOBILE")
    print("="*60)

    passed = sum(1 for _, status, _ in all_results if status == "PASS")
    failed = sum(1 for _, status, _ in all_results if status == "FAIL")
    skipped = sum(1 for _, status, _ in all_results if status == "SKIP")
    warnings = sum(1 for _, status, _ in all_results if status == "WARN")
    errors = sum(1 for _, status, _ in all_results if status == "ERROR")

    for test_name, status, message in all_results:
        icon = {
            "PASS": "‚úÖ",
            "FAIL": "‚ùå",
            "SKIP": "‚ö†Ô∏è ",
            "WARN": "‚ö†Ô∏è ",
            "ERROR": "üí•"
        }[status]

        msg = f" - {message[:50]}" if message else ""
        print(f"{icon} {status:6} {test_name:45} {msg}")

    print("\n" + "="*60)
    print(f"Total: {len(all_results)} tests")
    print(f"‚úÖ R√©ussis: {passed}")
    print(f"‚ùå √âchou√©s: {failed}")
    print(f"‚ö†Ô∏è  Avertissements: {warnings}")
    print(f"‚ö†Ô∏è  Saut√©s: {skipped}")
    print(f"üí• Erreurs: {errors}")
    print("="*60)

    print(f"\nüì∏ Screenshots sauvegard√©s dans: {TestConfig.SCREENSHOTS_DIR}/")

    # Note sp√©ciale sur le bug Mistral mobile
    if warnings > 0:
        print("\n‚ö†Ô∏è  BUGS CONNUS D√âTECT√âS:")
        print("   - L'API Mistral peut ne pas fonctionner correctement sur mobile")
        print("   - Voir CLAUDE.md section <troubleshooting> pour plus de d√©tails")

    # Code de sortie
    # Les warnings ne font pas √©chouer la suite (bugs connus)
    if failed > 0 or errors > 0:
        print("\n‚ö†Ô∏è  Des tests ont √©chou√©!")
        exit(1)
    else:
        print("\nüéâ Tous les tests mobile critiques sont pass√©s!")
        if warnings > 0:
            print("   (avec avertissements sur bugs connus)")
        exit(0)

if __name__ == "__main__":
    if not os.path.exists('web/index.html'):
        print("‚ùå Erreur: Ex√©cutez ce script depuis le dossier racine du projet")
        print("   cd /Volumes/sidecar/src/fiches-mots")
        exit(1)

    run_all_tests()
