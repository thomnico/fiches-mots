/**
 * Module de g√©n√©ration de mots via Mistral AI
 * Utilise l'API serverless pour g√©n√©rer des listes de mots th√©matiques
 */

class MistralWordGenerator {
    constructor() {
        this.apiEndpoint = '/api/mistral';
        this.timeout = 45000; // 45 secondes (plus long pour mobile)
        this.maxRetries = 2; // Nombre de tentatives en cas d'erreur r√©seau
    }

    /**
     * Fetch avec timeout et gestion des erreurs r√©seau
     * @private
     */
    async fetchWithTimeout(url, options = {}, timeoutMs = this.timeout) {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), timeoutMs);

        try {
            const response = await fetch(url, {
                ...options,
                signal: controller.signal
            });
            clearTimeout(timeoutId);
            return response;
        } catch (error) {
            clearTimeout(timeoutId);

            // D√©tecter le type d'erreur
            if (error.name === 'AbortError') {
                throw new Error('La g√©n√©ration prend trop de temps. V√©rifiez votre connexion internet.');
            }

            if (error.message.includes('Failed to fetch') ||
                error.message.includes('NetworkError') ||
                error.message.includes('ERR_INTERNET_DISCONNECTED')) {
                throw new Error('Pas de connexion internet. V√©rifiez votre r√©seau et r√©essayez.');
            }

            throw error;
        }
    }

    /**
     * G√©n√®re une liste de mots pour un th√®me donn√©
     * @param {string} theme - Le th√®me (ex: "automne", "animaux", "no√´l")
     * @param {number} count - Nombre de mots √† g√©n√©rer (5-20)
     * @param {Array<string>} excludeWords - Mots √† exclure (optionnel)
     * @returns {Promise<Array<string>>} - Liste de mots g√©n√©r√©s
     */
    async generateWords(theme, count = 10, excludeWords = []) {
        if (!theme || theme.trim().length === 0) {
            throw new Error('Le th√®me ne peut pas √™tre vide');
        }

        const cleanTheme = theme.trim();
        const wordCount = Math.min(Math.max(parseInt(count) || 10, 5), 20);

        console.log(`ü™Ñ G√©n√©ration de ${wordCount} mots sur le th√®me "${cleanTheme}"...`);
        if (excludeWords.length > 0) {
            console.log(`üö´ Mots √† exclure: ${excludeWords.join(', ')}`);
        }

        // Tentatives avec retry en cas d'erreur r√©seau
        let lastError = null;

        for (let attempt = 0; attempt <= this.maxRetries; attempt++) {
            if (attempt > 0) {
                console.log(`üîÑ Tentative ${attempt + 1}/${this.maxRetries + 1}...`);
                // Attendre un peu avant de r√©essayer (1 seconde par tentative)
                await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
            }

            try {
                const response = await this.fetchWithTimeout(this.apiEndpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        theme: cleanTheme,
                        count: wordCount,
                        excludeWords: excludeWords
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({}));

                    // Erreurs 5xx sont temporaires, on peut retry
                    if (response.status >= 500 && attempt < this.maxRetries) {
                        lastError = new Error(errorData.error || `Erreur serveur: ${response.status}`);
                        continue;
                    }

                    throw new Error(errorData.error || `Erreur API: ${response.status}`);
                }

                const data = await response.json();

                if (!data.words || !Array.isArray(data.words)) {
                    throw new Error('Format de r√©ponse invalide');
                }

                if (data.words.length === 0) {
                    throw new Error('Aucun mot g√©n√©r√© par l\'IA');
                }

                console.log(`‚úÖ ${data.words.length} mots g√©n√©r√©s:`, data.words);

                return data.words;

            } catch (error) {
                lastError = error;

                // Si c'est une erreur r√©seau et qu'on a encore des retries, continuer
                if ((error.message.includes('connexion internet') ||
                     error.message.includes('prend trop de temps')) &&
                    attempt < this.maxRetries) {
                    console.log(`‚ö†Ô∏è ${error.message} - Nouvelle tentative...`);
                    continue;
                }

                // Sinon, lancer l'erreur
                console.error('‚ùå Erreur g√©n√©ration de mots:', error);
                throw error;
            }
        }

        // Si on arrive ici, toutes les tentatives ont √©chou√©
        console.error('‚ùå Toutes les tentatives ont √©chou√©');
        throw lastError;
    }

    /**
     * Teste si l'API Mistral est configur√©e et accessible
     * @returns {Promise<boolean>}
     */
    async testConnection() {
        try {
            const words = await this.generateWords('test', 3);
            return words.length > 0;
        } catch (error) {
            console.error('Test de connexion Mistral √©chou√©:', error);
            return false;
        }
    }
}

// Instance globale
const mistralWordGenerator = new MistralWordGenerator();
