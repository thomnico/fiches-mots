#!/usr/bin/env python3
"""
Test de la fonctionnalit√© de pagination des images
V√©rifie que le bouton "Voir plus d'images" fonctionne correctement
"""

from playwright.sync_api import sync_playwright
import time
import os

def test_pagination():
    print("üß™ Test de pagination des images")
    print("=" * 60)

    # Configuration
    url = "http://localhost:8000"
    screenshots_dir = "web/screenshots"
    os.makedirs(screenshots_dir, exist_ok=True)

    with sync_playwright() as p:
        # Lancer le navigateur
        browser = p.chromium.launch(headless=False)
        page = browser.new_page(viewport={"width": 1400, "height": 1000})

        try:
            # 1. Aller sur la page
            print(f"üìç Chargement de {url}...")
            page.goto(url)
            page.wait_for_load_state('networkidle')

            # 2. Remplir le formulaire avec UN SEUL mot pour simplicit√©
            print("üìù Remplissage du formulaire...")
            page.fill('#theme', 'automne')
            page.fill('#words', 'feuille')  # Un seul mot

            # 3. Lancer la recherche
            print("üîç Lancement de la recherche...")
            page.click('#btn-search')

            # Attendre que les images se chargent
            print("‚è≥ Attente du chargement des images...")
            page.wait_for_selector('.image-option', timeout=15000)
            time.sleep(2)  # Attendre que toutes les images soient charg√©es

            # 4. Capturer la premi√®re page d'images
            print("üì∏ Capture page 1...")
            page.screenshot(path=f"{screenshots_dir}/pagination-page1.png")

            # V√©rifier que le bouton "Plus d'images" existe
            btn_more = page.query_selector('.btn-more-images')
            if not btn_more:
                print("‚ö†Ô∏è  Bouton 'Plus d'images' non trouv√©!")
                return

            # V√©rifier le texte initial du bouton
            btn_text = btn_more.inner_text()
            print(f"   Texte du bouton: '{btn_text}'")

            # V√©rifier que le bouton est visible
            if not btn_more.is_visible():
                print("‚ö†Ô∏è  Le bouton existe mais n'est pas visible!")
                return

            print("‚úì Bouton 'Plus d'images' trouv√© et visible")

            # 5. Cliquer sur "Plus d'images" pour voir page 2
            print("\nüñ±Ô∏è  Clic sur 'Plus d'images'...")
            btn_more.click()
            time.sleep(1)  # Attendre le changement d'images

            print("üì∏ Capture page 2...")
            page.screenshot(path=f"{screenshots_dir}/pagination-page2.png")

            # V√©rifier que le texte du bouton a chang√©
            btn_text_2 = btn_more.inner_text()
            print(f"   Nouveau texte du bouton: '{btn_text_2}'")

            # 6. Cliquer encore pour voir page 3
            print("\nüñ±Ô∏è  Clic pour page 3...")
            btn_more.click()
            time.sleep(1)

            print("üì∏ Capture page 3...")
            page.screenshot(path=f"{screenshots_dir}/pagination-page3.png")

            btn_text_3 = btn_more.inner_text()
            print(f"   Texte du bouton: '{btn_text_3}'")

            # 7. Cliquer encore pour revenir au d√©but (cycle)
            print("\nüñ±Ô∏è  Clic pour retour au d√©but...")
            btn_more.click()
            time.sleep(1)

            print("üì∏ Capture retour page 1...")
            page.screenshot(path=f"{screenshots_dir}/pagination-cycle-back.png")

            btn_text_4 = btn_more.inner_text()
            print(f"   Texte du bouton: '{btn_text_4}'")

            # 8. V√©rifier qu'on peut s√©lectionner une image sur chaque page
            print("\nüñºÔ∏è  Test de s√©lection d'images sur diff√©rentes pages...")

            # Compter les images affich√©es
            images = page.query_selector_all('.image-option')
            print(f"   Nombre d'images visibles: {len(images)}")

            if len(images) > 0:
                print("   Clic sur la premi√®re image...")
                images[0].click()
                time.sleep(0.5)

                # V√©rifier qu'elle est s√©lectionn√©e
                if 'selected' in images[0].get_attribute('class'):
                    print("   ‚úì Image correctement s√©lectionn√©e")
                else:
                    print("   ‚ö†Ô∏è  Image non s√©lectionn√©e")

                page.screenshot(path=f"{screenshots_dir}/pagination-selection.png")

            print("\n" + "=" * 60)
            print("‚úÖ Test de pagination termin√©!")
            print(f"üì∏ Captures dans: {screenshots_dir}/")
            print("\nV√©rifiez visuellement:")
            print("  1. pagination-page1.png - Premi√®res 3 images")
            print("  2. pagination-page2.png - Images 4-6")
            print("  3. pagination-page3.png - Images 7-9")
            print("  4. pagination-cycle-back.png - Retour aux 3 premi√®res")
            print("  5. pagination-selection.png - Image s√©lectionn√©e")

            # Garder le navigateur ouvert pour inspection
            print("\n‚è∏Ô∏è  Navigateur reste ouvert pendant 5 secondes...")
            time.sleep(5)

        finally:
            browser.close()
            print("üîí Navigateur ferm√©")

if __name__ == "__main__":
    test_pagination()
